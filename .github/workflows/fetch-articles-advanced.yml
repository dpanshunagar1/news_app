name: Advanced RSS Article Fetcher

on:
  schedule:
    # Run every 2 hours during business hours (9 AM to 9 PM UTC)
    - cron: '0 9-21/2 * * *'
    # Run once at night for overnight news
    - cron: '0 3 * * *'
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      force_fetch:
        description: 'Force fetch even if recent fetch exists'
        required: false
        default: 'false'
        type: boolean

jobs:
  fetch-articles:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Check Application Health
      id: health_check
      run: |
        echo "üîç Checking application health..."
        response=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.APP_BASE_URL }}" || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Application is healthy (HTTP $response)"
          echo "healthy=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Application health check failed (HTTP $response)"
          echo "healthy=false" >> $GITHUB_OUTPUT
        fi

    - name: Fetch Articles
      if: steps.health_check.outputs.healthy == 'true'
      id: fetch
      run: |
        echo "üì° Fetching articles from RSS feeds..."
        
        response=$(curl -X POST "${{ secrets.FETCH_ENDPOINT_URL }}?token=${{ secrets.CRON_SECRET }}" \
          -H "Content-Type: application/json" \
          -H "User-Agent: GitHub-Actions-RSS-Fetcher/1.0" \
          -w "%{http_code}" \
          -s \
          -o response.json)
        
        echo "HTTP Response Code: $response"
        
        if [ "$response" = "200" ]; then
          echo "‚úÖ Successfully triggered article fetch"
          echo "success=true" >> $GITHUB_OUTPUT
          
          # Log response if it contains useful info
          if [ -f response.json ] && [ -s response.json ]; then
            echo "Response body:"
            cat response.json
          fi
        else
          echo "‚ùå Failed to fetch articles (HTTP $response)"
          echo "success=false" >> $GITHUB_OUTPUT
          
          # Show error response if available
          if [ -f response.json ]; then
            echo "Error response:"
            cat response.json
          fi
          
          exit 1
        fi

    - name: Verify Articles Updated
      if: steps.fetch.outputs.success == 'true'
      run: |
        echo "üîç Verifying articles were updated..."
        
        # Wait a moment for processing
        sleep 5
        
        # Check if API returns articles
        article_count=$(curl -s "${{ secrets.APP_BASE_URL }}/api/articles" \
          -H "Accept: application/json" | \
          jq -r '.pagination.total // 0' 2>/dev/null || echo "0")
        
        echo "Total articles in database: $article_count"
        
        if [ "$article_count" -gt "0" ]; then
          echo "‚úÖ Articles are available in the database"
        else
          echo "‚ö†Ô∏è No articles found - this might be normal for a new deployment"
        fi

    - name: Send Notification on Failure
      if: failure()
      run: |
        echo "üìß Sending failure notification..."
        
        # You can add webhook notifications here
        # Example: Slack, Discord, email, etc.
        
        curl -X POST "${{ secrets.NOTIFICATION_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "text": "üö® RSS Article Fetch Failed",
            "attachments": [{
              "color": "danger",
              "fields": [{
                "title": "Repository",
                "value": "${{ github.repository }}",
                "short": true
              }, {
                "title": "Workflow",
                "value": "${{ github.workflow }}",
                "short": true
              }, {
                "title": "Time",
                "value": "'$(date -u)'",
                "short": true
              }]
            }]
          }' || echo "Failed to send notification"

    - name: Log Summary
      if: always()
      run: |
        echo "üìä Fetch Summary:"
        echo "- Timestamp: $(date -u)"
        echo "- Repository: ${{ github.repository }}"
        echo "- Workflow: ${{ github.workflow }}"
        echo "- Run ID: ${{ github.run_id }}"
        echo "- Health Check: ${{ steps.health_check.outputs.healthy }}"
        echo "- Fetch Success: ${{ steps.fetch.outputs.success }}"